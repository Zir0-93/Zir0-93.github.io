Not related to this patch, but would it make sense to rename this to something like CallbacksAndInterceptors, or something of that sort, as this is made up of user and interceptor callbacks. 
Can this just return 0 if length == 0? 
I'd rephrase that to:  ``` java LOG.warn("AMQP heartbeat interval must not be negative, using default timeout ({}).", ConnectionFactory.DEFAULT_HEARTBEAT); ``` 
Look up `Predicate<T>`, basically renders this class pointless. 
That's what I was hoping to do, but couldn't due to the storm and backtype `TopologyContext` class and how they use `MetricsDelegate`. It needs to know both the class that extends `IMetric` (T) and the type of metric (U), since it takes an `IMetric` delegate and returns the return type.  ``` public class TopologyContext ... {   ...   public <T extends IMetric<U>, U> T registerMetric(String name,                                                     T metric,                                                     int timeBucketSizeInSecs) {     MetricDelegate<T, U> d = new MetricDelegate<>(metric);     delegate.registerMetric(name, d, timeBucketSizeInSecs);     return metric;   } ```  ``` public class MetricDelegate<T extends IMetric<U>, U>     implements com.twitter.heron.api.metric.IMetric<U> {   private T delegate;    public MetricDelegate(T delegate) {     this.delegate = delegate;   }    @Override   public U getValueAndReset() {     return delegate.getValueAndReset();   } } ``` 
In the previous code, if there is an TTransportException, mIsConnected is still "false", isn't it? 
please hide the visitor implementation if not relevant for the API 
Nullability 
formatting 
Minor comment: Just curious  about motivation here to change the code? 
I was going to say we should probably break down this class rather than loading all these different properties into one place, but at this point, probably worth just tacking it on.
2015 
Because you have wrapping the passed adapter (Much like the super implementation of this method) you should also override `getAdapter()` to give back the wrapped adapter 
When does this happen? 
Add a helper method:  ``` java public String getLocalFileName() {    return (lpszLocalFileName == null) ? "" : lpszLocalFileName.getWideString(0); } ``` 
style-nit: I find it more readable when line breaks are added at higher-level breaks. Could you insert the line break after one of the commas (perhaps after the first one)? 
This is not the case, other asserts for workers.get(0).getUsedBytes() in this test later on will also fail. 
Does this work? The java:comp/ is meant to be useable within a deployment's runtime and isn't necessarily setup such that it's accessible from MSC services. 
Imho the collectPhase should be read only and not mutable.  If this doesn't work without setter then I think we should just leave it as it is instead of abusing the JobCollectContext as messenger class for the collectPhase
Why is this in the android package? I know we internally are using the Looper, but apart from that the general functionality is general-purpose? 
add a todo to use the code generator for this 
You should be building this content in the commit method, not the run method.  Otherwise, your commits are going to skip some messages. 
Is it in `contrib`? If yes - it's unclear.
stream is  a constant. Can you please make it upper case. 
Similar comment as that last one: rather than loading the typeface, this could use TypefaceCache (if TypefaceCache.getTypeface() was made public rather than protected). 
I think a better signature would be:  ``` public <V> V checkSucceeds(Callable<V> callable) ```  If this is the only change (other than the tests) could you update the commit message to be someone more specific? Perhaps "Make ErrorCollector.checkSucceeds() generic" 
You could change the name to lengthenShortUrl(). The current lengthenShortUrl() is probably not used any more. 
Indentation? Kafka uses 4 space indents for java 
a few too many spaces 
maybe consider using Completable.ambArray here 
JavaDoc? 
`final` 
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/torodb/stampede/pullRequest?prid=625095)
Why not eagerly create the cache here? 
I think you need to update the message to have another `{}` since `e.getMessage()` is no longer a throwable.
What's the objective here? Performance I guess? 
Similar comment about configs here as with the other Reporters. 
Collections.synchronizedSet shouldn't be needed, since installedDrivers is now a copy. OTOH, there's a pre-existing problem where the whole method should be in a synchronized (drivers) block as that field is not thread safe. 
`MaxFreeBalancer` seems to be more intuitive. 
is this intentional that newly added schemas are immediately updated as well?
nit: Indentation is a little off here. 
Should this be "cancel connect call fail" ? 
Ditto 
Why not just play() when we call this? 
Same issue on variable names. 
Heh, clearly there's no test for this check 
Likewise, please move this to the top of the test, or a @Before method. 
we might have gone beyond the endDocId in the previous loop (line:177), we should check getRight is less than endDocId every time we add to newPairs 
This whole block assumes that the same disposable instance is sent multiple times from an operation to the repository. Although I think the described behaviour is the correct one, I would assume this would probably mean the operation has failed to properly pass the ownership of the disposable, most likely leading to all sorts of trouble in other parts of the code.  It kind of make me wonder about the disposing and passing of ownership as a whole here. It does mean that clients using repo.get() should never retain that value. It does however also mean that since repo.get() can be called on any thread, there's actually no guarantee that the disposable object returned haven't been disposed of already in another thread, even if the reference is only kept on the stack?  Does this mean that disposers should only get intermediate values, and that retained values in a repository should never be considered as disposable (nor sent to the disposer)? If so it does remove some of the issues with this block, and the comment about initial value. 
I use `code` for classes that are external to Tachyon code base 
I think there is an extra space here 
Could we make a "@"link of ConsumerRecord? 
We like to make all our endpoints RESTful, so this should be `@Path("state")` and should accept the new state to transition to 
spell error 'TableScame' 
Android field naming convention done ;) 
Should be `SingleValueMap` 
Separate classes for files and directories?
why not return an empty string in the absent case (`orElse("")`) here and then not have the `@Nullable` annotation above? 
This will change it for all future requests as well. Not ideal. Should be an instance variable. Put hte context into the SocketIOConnection object. 
Let's rename this method into something like 'check...' or 'validate...' 
let me know if this is over-engineering... 
I think you could use the bytes from addBytes as argument to flush and then just use a local variable to avoid all the .get() calls.  I think the way this method currently works it isn't really thread-safe.  For example:  Thread1:   addEstimateBytesAndMaybeBreak(  flushBuffer.get()) //   5 bytes. Thread2:   flushBuffer.addAndGet (6) and gets into flush()  Thread1:   totalBytes.addAndGet( flushBuffer.get() ) // return 11 bytes Thread1:   flushBuffer.set(0); Thread2:   if (flushBuffer.get() == 0) -> returns  now totalBytes and whatever the breaker has internally is different. 
This seems an odd change. Going to switch back to being separated below. 
solve todo. imho 1 based indices like at the internal array subscript function 
Nasty, but also wonder why they decided to go this route.. it seems dumb. 
Netty makes sure not to call it concurrently, but agreed, its too hidden, will just change to atomic counters for simplicity 
I think i is not neccessary to have a `CustomCapturingMatcher`,  this implementation could be moved to `CapturingMatcher` and use an `any()`Matcher if used in a `ArgumentCaptor.capture()` call. 
`byId` here too? 
can you add comment about why the initialCapacity is 10 
Also add `!isEmpty()` just so we are nice to the compiler.  
I think this will be a bit tricky, since the current setup logic depends on the `intrinsicWidth` and `intrinsicHeight`s of the `Drawable`, which will be the original dimensions if we don't create a new bitmap. We'd also need special cases that handle the other orientations (not sure if we can mirror bitmaps in place currently without going into native stuff like JNI).  
same here 
`"Only image resources can be used with the image pipeline. " + resourceExt + " files are not supported."` 
I'm more inclined to logging to the error output stream. I believe it's more suitable for this kind of messages.  We can redirect `StatusPrinter` to `System.err`, but also should have bear in mind that `StatusPrinter` for some reason is static, so we should restore it to `System.out` after using. How about making the output stream as a field of `LoggingFactory`? Something like this:  ``` java @JsonIgnore                                          private final PrintStream configurationErrorsStream; ... @VisibleForTesting LoggingFactory(LoggerContext loggerContext, PrintStream configurationErrorsStream) {     this.loggerContext = checkNotNull(loggerContext);     this.errorsStream = checkNotNull(configurationErrorsStream); } ...  StatusPrinter.setPrintStream(configurationErrorsStream); try {     printIfErrorsOccured(loggerContext); }  finally {    StatusPrinter.setPrintStream(System.out);  } ```  As a benefit, we can pass a fake stream in the test to the class in the constructor. 
nit: sort these by the order they come from the network?  status, reason, headers, body 
} else { 
unbounded? 
Consider adding JavaDoc (and since tag).
While this is rather easy for the `Counts` class, do we really want to hardcode static query strings instead of using some helper to build them in general for the long run?
Move this down closer to where it is used 
These behaviors can be front loaded to configuration time. Another PR. 
is this behaviour correct? shouldn't we raise an error instead? 
Update the comments here. 
Should this be WARN or INFO? I feel it is not "abnormal" that the topic partition does not exist yet on bootstrap or topic update? 
Doesn't this break the semantics of Future.get() method? 
~~Why did this need to change?~~  Ignore my comment 
don't use abbreviations 
Throw a proper exception if you need something more then the interface, this will error out on class cast which isnt as useful in debug. 
nit: could you collapse all of these into fewer lines? 
Whats with the weird restructuring of imports? 
ditto 
see my comments on `ChainedDescriptor` ... I'd love it if we can make this `Descriptor<? super E>`
this should be the Alluxio type 
What happens to the vanilla fields when you add things? 
Why use this tag?
add comments before merge here please  
This is only used in one place.  Just create an anonymous class where it's used. 
I did some search and it seems the dollar sign `$` is legal to trail the user/group name. It would be good to put in a comment that which standard we are following to construct this `USER_PATTERN`
I think you can just drop the check altogether, no? 
Rather than pass in a new parameter, it seems like it would be easier to create a static method like the following:  ``` java protected static Token getStartTokenOfFirstRule(Collection<? extends Collection<Rule>> cycles) {     if (cycles == null) {         return null;     }      for (Collection<Rule> collection : cycles) {         if (collection == null) {             return null;         }          for (Rule rule : collection) {             if (rule.ast != null) {                 return rule.ast.getToken();             }         }     } } ```  You could then pass `getStartTokenOfFirstRule(cycles)` to the super constructor instead of `startTokenOfFirstRuleInCycle`. Note that the complete set of null checks in this method ensure it will never throw an exception for poorly formed input. 
Same 
Executable is a confusing suffix for this class.  Perhaps CreatorExecutor?
Code style generally favors writing out imports instead of allowing wildcards. Also, the `jopenvr` package doesn't include a domain? That's sort of odd. 
It will be great to add java doc for this as well. 
Add imports for all this nonsense 
Since Java 8 the compiler can infer such explicit type arguments, so I beleive `<JsonPrincipal>` is redundant. 
Add a comment explaining the logic here, it's a bit non intuitive. 
should this be `AccessControlException` or `IllegalArgumentException`? 
This could be simplified by using `StringUtils.stringToInt()`. 
new, not-used method 
and again... 
Nice comment. 
nit: test prefix is not needed 
normalizeIndex is used via MethodHandle in line 39. you cannot remove these
Can we add suppress warnings here `@SuppressWarnings("unchecked")` (and for the cast to List below) ?
Since the above two methods are "synchronized", let's also put this one as "synchronized" 
Put this condition outside the `inode.isDirectory` check
Any particular reason you use an `Iterator` explicitly here instead of just a "for-each" loop? 
you could just assign the condition that you use in the if statement to passed 
Couldn't we leave this as it was before? It is true that the PR removed the internal use of the method within the try-catch of `ResponseBodyEmitter#sendInternal` and that any errors from the container side should work as expected but a controller could also call `completeWithError` and the change eliminates the option to complete with error from the application side unrelated to write issues (and regression for some apps).  If a container and an application thread both try to `setErrorResult` at the same time `DeferredResult` will only accept the first. We can document to not do that after a write failure which could be one reason for a close timing. Other than application vs container side `setErrorResult` should be quite rare. If it does happen I'm not sure there is much we can do and in any case it implies the response is not usable.  
I prefer we let Js dictate the notification height by using `WRAP_CONTENT` and setting a specific height in Jsx. wdyt?
grammar: `each of them`.  On a related note, try to avoid overusing it. It is easier to understand a sentence if it uses nouns instead of pronouns. For instance, the last sentence could be `This method also requires that the output files do not exist in Tachyon as it will create an empty file for each of the output files.` 
use of "this agent" this might be copy and pasted from previous commit? 
Same here 
You have "grant_type=authorization_code" parameter in ACCESS_TOKEN_URL. looks like redundant as well 
Ditch this method completely. I just made a fairly substantial change to the API and this is a trivial adjustment to make. 
make `private`
as exception is dropped, should we at least log it ? 
typo : applicationS 
I doubt that this works in general. Can you please verify? 
Use static final instead of hard-coded values 
There are no direct tests, that's true.  It is tested through the various queries, but some direct tests would probably also be meaningful. 
Use `/** ... */` to take advantage of Javadoc tags. 
pls add javadoc
Wrong import. 
also change it in `testShowTablesFrom`` 
With all these nested `null` checks it makes me with we used `Optional` more places in our code :-/
Turn it into `new PrestoException(INVALID_FUNCTION_ARGUMENT, "a human readable string description", e)`  In general, throw this exception when input is invalid (invalid unicode, etc.). 
We don't need this constructor. It will only invite bad behavior :) 
style nit: `} catch` on same line 
Could be package private instead of protected? 
Use `ImmutableList.of(SortOrder.ASC_NULLS_LAST)` 
non-boxed `head` access 
not "any nodes" any more 
it is :) 
Was there a reason to not be consistent with the rest of the testcase -  ```         assertThat(result.isAccepted(), is(false));         assertThat(result.httpCode(), is(HttpStatus.SC_ACCEPTED));         assertThat(result.hasMessage(), is(true)); ``` 
this should be done by CommonAttributes.DEFAULT_DATASOURCE.validateAndSet(operation,model) 
shouldn't this preserve the existing type descriptor, if any?
is subclassing the best choice here? is it possible to have a OutStreamIntegrationTest base, and we fill in different write type? 
hrmmm, maybe there should be a javadoc somewhere that describes this process. There is a temp, backup, and tempbackup file, which can be confusing. 
Did you forget a git add ? 
I think we can call the options just `CreateOptions` 
Maybe simply overriding `finished` would make a more simple example? 
This comment can be removed IMO
`is` is always `null` 
If we are always dealing with character-based payloads (and maybe we aren't) then logging the decoded version of the payload in a toString() would probably be more useful than the raw byte array 
sure, can add protection. Its protected on the higher level, but makes sense to protect here as well 
Please add a `addAlertCondition()` (or similar) method to `PluginModule` like we have for alarm callbacks and others. You can then also just extend `PluginModule` and use that method in here. 
Should this be called `connectionDeadline` or something with deadline in it? I think there is a difference between a timeout and a deadline. 
(minor) I would test the positive condition `isEmpty()` and swap the cases. It is less information for the human brain to process and `!` can be overseen 
There is some duplicate code here in the if/else block. Why not move the setting of the badge number to after the if/else and do something like:  ``` SharedPreferences.Editor editor = context.getSharedPreferences("badge", Context.MODE_PRIVATE).edit(); editor.putInt("badge", badge > 0 ? badge : 0); editor.apply(); ```
should this be final? 
line break? 
throw? 
I don't think we need to have this method and the boolean flag any more. It was only necessary in the Tap framework in the old code. You also don't call it I think 
This should be `AccountPasswordMustChangeException` instead.
Should this javadoc not be moved to the AbstractMapDataStore or wherever the addTransient is defined? 
This is self-referential.  You're basically defining what an interface is used for. 
We should ideally set these threads as daemon to avoid the possibility of hanging shutdowns in clients/server. This requires associating a thread factory with the executor as we do in the server’s `KafkaScheduler`. This will also get rid of the requirement to formally close the metrics object in all the tests (although I think close is a good practice regardless if we are associating a thread pool with metrics). 
should be two space indent here and in the test. 
how much of a performance difference does this actually make? I think things are fine both ways though. 
Is it possible for `getMaxAttempts()` to be < 1 ? 
queryParameter takes the _unencoded_ value, and you're querying with the encoded value. This is incorrect. 
Can we remove the `_` at the beginning.  I know it matches the rest of the file but we are moving away from this style.
It's part of my last commit. 
This can be simplified to an `if/else` block, or ternary operator if you're feeling crazy :stuck_out_tongue_winking_eye: 
also set InstanceInfo to null here? 
Can we also check here that the annotated fields have indices that include every integer from 0 to some n? 
When I run a job from Eclipse using a LocalExecutionEnvironment, `TASK_SLOTS` is set to -1 and execution fails. This might be a problem with the LocalExecutionEnvironment, but should be resolved. 
While we're updating this, change to `RAPTOR_CORRUPT_METADATA` 
`Not Unsuspend` -> `Not unsuspend` 
Reduce the logging level to debug or trace 
When `isExpanded()` is called `isExpandable()` is checked internally too.
Kill. Use try/catch and assert something form the exception message to verify you're getting the right one 
I'm not generally a fan of the direct access to class internals approach. I would still prefer this to have getters instead and make the fields private final. 
we already did enclosing in group, I do not see reason in this wrapping one more time. Please explain a reason or remove it. 
`String` ctor takes length as the last arg, so you need to pass `limit - pos`. Also the charset is missing. 
Good find! 
invalid parameter 
Can you use FEST reflect for nicer code? 
Keeping a map of attachments to views here, to allow reliable update of views. This is transient state which will be lost during configuration changes, it's the presenter's job to keep and restore the state. 
`itterator`'s a typo 
Good point, done. 
Or just nuke this behavior! 
This could be removed. 
The runs are under the same /tmp/alluxio-tests/ directory. For example, the pull request builder might create /tmp/alluxio-tests/folderA at 1pm, then while that's running the master build starts at 1:50pm. If the threshold was under 50 minutes the master build would delete /tmp/alluxio-tests/folderA out from under the pull request builder.  Basically, we just want a safe value here such that we don't delete any directories that are actually being used. We could probably get away with lowering this to ~30 minutes, but I chose 2 hours to be completely safe. I'll change it to 1 hour since we fail the build after this amount of time anyway. 
I would say that as this class is a "common class", this utility class is requiring tests to be sure that each method is working as expected. For such class, 100% code coverage is expected 
Need a dot at the end for correct JavaDoc 
I'm not really clear why this is done in a separate loop. Are you trying to avoid the work of collecting valid records unnecessarily? Also, I think the loop below still has the OFFSET_OUT_OF_RANGE check. 
Can we try another way to do this here instead of having a default static instance reference of a child class in the TransportClientFactories interface? One suggestion could be: - define the interface for TransportClientFactories as is, but with no default static instance - have a TransportClientFactoriesProvider, e.g.   ``` java public class TransportClientFactoriesProvider implements Provider<TransportClientFactories<?>> {      private volatile TransportClientFactories<?> transportClientFactories;      public TransportClientFactoriesProvider(TransportClientFactories<?> transportClientFactories) {         this.transportClientFactories = transportClientFactories;     }      @Override     public synchronized TransportClientFactories get() {         if (transportClientFactories == null) {             transportClientFactories = new Jersey1TransportClientFactories();         }          return transportClientFactories;     } } ``` - in DiscoveryClient, initialize this provider with args.getTransportClientFactories(), then just get the actual impl out here in the same way. 
before invoking this method, do we require `parent` needs to be read-locked? If yes, we should document this
Is this only used for directory breadcrumbs? We may want to name it something else.
It's not very readable to use `%s` to format constant strings. I was suggesting that you could use `String.format` so you could use `File.separator` in the message without concatenating strings. 
abstract? 
This is really ugly. Break into two lines 
这边加上{}，提高可读性。 
`isRtl`, acronyms always get camel cased to eliminate ambiguity: https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s5.3-camel-case 
Instead of doing another map - why can't we use the Config structure?  Config auroraProperties? No need for yet another map. 
I don't think we make fields final, either, unless we need to use them in an anonymous class 
the naming is inconsistent 
Cool. 
private?
the method 
Typo, should be: "an ever-updating" counting table" 
How does the reader itself know when to checkpoint? Shouldn't the consumer decide?
I think somewhere in the parameter name should say "inquire", since this is the number of times to retry while looking for the leader. 
Why domyou remove the NPOT check? 
How about raw types? Will they fail later? 
note that `HostSelector::parse` returns `null` on bad input  I'm guessing this will yield a 500 with no error message on bad input? 
The value 64 is used in many places. Maybe we should promote it to a constant? 
This javadoc will have to be updated, I reckon. 
two space indent 
This class should now be unchanged, but here the position of import assertSame is changed and a } is deleted and immediately re-inserted. Not sure how to completely revert all changes to this file to prevent creation of an unnecessary version. 
Please set maturity to EXPERIMENTAL and severity to WARNING, for all of these checks. 
Add final modifiers to fields that are not modified.
Could we also support `io.netty.leakDetection.level`? We need to support the old name for backward compatibility, though. 
this can be private 
Why would a dimension that existed in one of the segments no longer exist in another one?  I.e. under what conditions is it expected that this will be `true`? 
Format like this:  ``` java         assertQuery("" +                 "SELECT COUNT(*) FROM " +                 "(SELECT orderkey FROM lineitem WHERE orderkey < 1000) a " +                 "JOIN " +                 "(SELECT orderkey FROM orders WHERE orderkey < 2000) b " +                 "ON NOT (a.orderkey <= b.orderkey)"); ``` 
We probably want to support NULL here. 
You don't need to add API on BroadcasterCache IMO. You can also retrieve from the Broadcaster.  The `Serializer` should be set on the `Broadcaster` IMO, not the cache. 
Add a comment here: short sleep to avoid busy looping 
You probably should make sure the `producerThread` is stopped at the end of the test. Perhaps make it a field and in `shutdown` `interrupt` and `join` the thread if it is non-null?  
This doesn't need to be a separate build rule, it can be a step in the compilation rule, at least that's how we do it in all other cases. 
nit: don't need `this` 
Why not delete this one, as well? 
Use method reference instead of lambda (see previous comments) 
Don't remember.  I'd be fine undeprecating it if you wanted to do so in this pull or elsewhere. 
Oooh, you can avoid the substring call. Push will do that for you automatically. 
minor not spelling "foloowing" 
Please check if pSecurityDescriptor could be declared to take a WinNT.SECURITY_DESCRIPTOR. I'm not sure how sensible this is, as SECURITY_DESCRIPTOR is basicly an opaque strucure, but it would be typed that way (maybe that structure needs a constructor added that takes an allocation size). 
*Instantiator 
See comment in the other file about using `final` in parameters 
You need to pass the expectedOutputs down the hierarchy to get the pruning to work properly. Otherwise, pruning will always halt right here.  planRewriter.rewrite(node.getSource(), expectedOutputs);  You don't need to worry about including node.getOutputSymbols() because by definition of DisitinctLimitNode, it will never add any new symbols from its source. 
All nodes are dependent on a camera from which something is rendered. Previously these nodes relied on an identical line placed upstream in a previous node. If a second camera was set between that node and this node, this node would render through the second camera instead.   By placing this line in this and other nodes I make the dependency on this particular camera explicit and these nodes can move in the render graph slightly more freely.   Eventually this line (and the identical ones in other nodes) will be replaced by a StateChange and/or a setCamera() method. In turn these ways to set the camera for the node will eventually take in input an entity with an attached camera component rather than an instance of a camera class. But that's still some way out. 
missing tests on UserImpl (like equals) 
This check needs changes, if the file does not exist the message is always shown (if it does not exist it should use the parent file instead). 
`isNullOrEmpty` 
we removed notions of case insensitivity in Druid, so I think this should be just 'createIndex' 
Not catching a Throwable this time? 
remove "file" 
This field definition seems strange. Why are these two interchangeable? 
Please move all `PROXY-*` properties to `ClientProperties`. We may want to re-use it also for other connectors.  Note that I am not asking you to implement the support for them in the other connectors, just to move the properties. You can add a javadoc note that these are now only supported by Jetty connector. Ideally, you can also add a  ``` // TODO Need to implement support for PROXY-* properties in other connectors ```  comment before those moved properties. 
maybe name this getValue or getNumber, since it can be used to parse things besides counts 
why don't we make it so that getIdStringQuietly() handles the 'id == NO_ID' case? 
Indentation two spaces please 
Good catch! 
This is ugly. Maybe tpch should have an enum with the logical type? 
Afaics from the code above value can never be null...
This doesn't seem to be used anywhere 
It would be nice to replace this _continue_ by wrapping the next few lines in the _if_. 
Does this need another / in http://?  Or is that already present in info.groupOwnerAddress? 
return new StringBuilder().append()....toString(); 
Remove redundant check - you also have it in JNI C++ layer. 
This branch needs to call `process(node.getValue(), context)` 
To make this simple,  ```java PropertyKey key = create(name, defaultValue); ``` It is a good practice to re-use existing factory methods/constructors as much as possible and leave only the logic that is really different here. It is easier to understand and maintain too. 
`Blocking queue to use.` 
unrelated, @Macarse has done some work to get rid of these listeners entirely using lombok.  I don't have a sense for how much performance they cost, but it seems like using `Matchers.any()` can't come cheap 
is this class needed? 
no need to do now()-based logic here, just construct url via httpl util and pass in the query params for start/end if they are present. 
is this just a pattern for clarity? because it's equivalent to synchronizing over `this` 
add a test expecting no failure
You should use try with resources here too. 
Is there a compelling reason to go with a dedicated PreferenceActivity rather than the existing PromptApnActivity?  Either is potentially fine with me, but I think we need to provide a little more context to the user about what's going on and how they should go about configuring these details than what's in this preferences.xml.  Most users aren't going to know what an MMSC URL is, so we should provide some short copy that explains what it is we need and how they should find it. 
You need to add a test where the actual mail breaks down. This should involve a mock on `JavaMailSenderImpl`. Throwing some exception on the `getSession` call would be enough to prove the exception is properly handled. If you want to do things properly, I'd test a failure on `Transport#close`. 
added 
examples package 
It seems that we only reserved 3 bits for compression codec? 
https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html#toMillis(long) ? 
Please build engine information in line with https://github.com/junit-team/junit5/issues/590#issuecomment-265621984
In this case noting should be captured, see [my comment above](https://github.com/mockito/mockito/pull/606/files#r76538541). 
I take it this starts some thread? Would it be possible to inject some executor to do this instead. I know we're trying to centralize thread creation for working with OpenShift but am not sure how strict we are about this at the moment 
nit: final 
Probably good to have  ``` java + new String(selectedProtocol, "US-ASCII") ```  since new protocols are working their way down the pipe. 
在这里加了一个判断，表示没看懂为什么要加这个判断
`@linkplain` 
I don't like the idea of injecting important behaviour through monitors. Could this not be put in the SPI.getRecoverer implementation in NeoStoreDataSource? 
please remove outer if (removable > 0) and add it here: if (removable > 0 && clockSource.elapsedMillis(bagEntry.lastAccess, now) > idleTimeout) 
I thought this generated garbage, although it being the `SpriteBatch` constructor I doubt it matters. 
put comment here `// bigger than MAX_INT`? 
We would now have a getState() and a getStatus(). I think this leads to confusion. If getStatus is a fine grained version of getState() let's find a way to communicate this fact. If getStatus() is meaningful only during the "running" state (as hinted by the EngineStatus javadoc) let's make sure that is also easy to latch on.  I thought of a few options (getRunningState(), getFineState()) but perhaps getSubState() is the most appropriate. Obviously you'd have to change EngineStatus into EngineSubState and everything associated with it. 
Builder pattern. 
Would this be easier to read if you reformulated the conditions? Essentially you're now always prepending a whitespace, except for the lastchar/',' case (where op == ',' should always be a binOp, right?). So you could just check for the binOp case for the appended whitespace. 
This if-ladder is partly why we shouldn't switch to use integer indices for these. A class or enum that can be added to a list is much better (it doesn't tie code generation as closely together with the parameters, which makes it much more extensible). 
"location" -> "index" (that's also the standard for AbstractList). Update everywhere. 
There's still a race here. Another thread might decrement `currentMemory` between the call to `addAndGet` and `get` 
Ok, I added a TODO for this. 
What other rules do we want to enforce here? 
Why is the `skewAllowance` not pass to the `GoogleAccountsService`? 
nice. 
Whitespace at the end? 
Why not simply create a custom qualifier annotation and use it here?  ``` java @Qualifier @Documented @Retention(RUNTIME) public @interface OkHttpNetworkInterceptors { } ``` 
It seems that `fetchUsers()` goes one step further than just fetching the data from the backend and continues with saving them in the DB.  I would recommend unbundling that extra step and perform it in the callback instead. That way, `fetchUsers` responsibility is kept simpler and more testable. 
This loop is extremely inefficient. Is a very busy wait loop (one CPU core will constantly burn cycles on this loop). 
Is there a need to flush the "tracer" at here before System.exit(0)? The reason I ask is I'm not sure how the automatically scoped TraceScope works with abnormal exit like System.exit(), i.e., whether span.finalize() would be called in the event of System.ext()... (My understanding is the process is terminating, there is no need to do GC and reclaim out of scope variables anymore, so the flush won't happen...).  Or we can move System.exit(0) outside the scope of TraceScope. 
For better readability please save the value to a local variable with a descriptive name first, e.g  ``` java String messageText = mMessageContentView.getText().toString(); TextBodyBuilder textBodyBuilder = new TextBodyBuilder(messageText, ...); ``` 
`BaseSpan` is a strange name. It's something like `prevSpanContext`, maybe should be a new type, which contains: traceid, parentSpanId. No need be a `span`.
The proxy can be configured on global config level too, need to use the one in the future 
I looked into this, `_score` doesn't work for either Groovy or Mvel (probably due to this being in an aggregation?). If this is something we want to support I think we should open a separate issue for it. 
Wouldn't it be better to disable NAKs as a static final and just skip the entire activation instead? @mjpt777 thoughts? 
Ouf :-) Might now want to change the formatting :-) 
same as the above... this exception should be thrown on regular Jedis class, not JedisCluster. 
fail() 
I guess these could be public final fields and lose the getters, as it's a pure data class? 
same here 
since changing it has no impact and used only in once place. I don't see any advantage of turning it into a constant really. 
This is out of the scope of this PR: we are now coupling the flushing on the store with forwarding on the processor node here, which is admittedly not ideal; and partly because of this we are adding this function only in the DSL and it from user-facing APIs. Moving forward we should consider a cleaner mechanism for allowing users to decouple flexible flushing (which is a notion of the store) with forwarding (which is a notion of the processor node). 
NIT: import order and separation:  ```java  import java.io.FileWriter; import java.io.IOException; import java.lang.reflect.Field; import java.util.HashMap; import java.util.Map;  import javax.annotation.concurrent.ThreadSafe; ```  
As discussed, lets keep this class immutable. 
I believe that on most JVM implementations, the sleep is useless. 
break line 
I'm wondering here if it'd be worth to use the BufferedImage.getData() method to obtain a Raster object and then iterate over pixels directly instead of going through integer arrays. Not quite a priority though. 
Why wouldn't this be supported? It returns a copy, which wouldn't affect the original. I think the parent implementation of this method is fine. 
why are these endpoints added under the master/block namespace? I think they should all go directly under the master namespace ... they have no relation to the block master (conceptual one anyhow) 
See my comment to `mapValues` for `KStream`.  That is, I'd clarify to sth like "transforming the value of each element in this stream into a new value in the new stream". 
See comment above please.
I dont think that this check is needed here (otherwise it will throw an index out of bounds exception, which says the same). https://github.com/libgdx/libgdx/wiki/Contributing#performance-considerations 
since the order matters for these, it would make more sense to return a List
You probably don't want or need this.  Running indexOf/substring is almost certainly faster than maintaining and looking up in a hash map.  Remember, in order to lookup in a hash map, you must call String.equals on the key which will iterate through each character of the string.  indexOf and substring will iterate through only part of the string. 
You are ignoring the return value of the latch. So you have no way of knowing if the latch.await completed successfully. Use the HazelcastTestSupport.assertOpenEventually 
If we are going to break this, can we make a accessor for this instead?   
Why renumber this error code 
I think this method can work just like `set()`. You complement the `intMask` with `~` and then `&=` it. 
separate these into two statements and remove the space before ;
"duel"? 
hm, wrong 
@DrKLO @midi We can also change this rule to: if (cs == null || cs.length() == 0 || Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {  ... and remove the other changes, so the KitKat emoji set is always used whenever available? 
Shouldn't this actually be implemented? Finite liquids CAN be filled, as long as it's the same liquid, and the the update ticks should equal themselves out. 
This was classified as a dangling comment, hence the move by a few lines and the demotion from javadoc to simple block comment. 
Would it be better to use `TimeUnit.MILLISECONDS.toMinutes()` here? 
Just wondering about if a cypher dump shouldn't also export the relevant indexes / constraints? 
If we no longer have a pool to return it to (only occurs due to `reset()` being called?), should we just treat it like a remote worker client and close it, crashing seems a bit extreme? 
Off-topic: I was not aware that Scalaz fails in that case. Do you know why? 
Naming this "resultSelector" seems off (copy/paste?) since it's more akin to `combineLatest` which uses "combineFunction". 
Is `mJournalCheckpointThread` ever not null, if it is, is it guaranteed that `mJournalCheckpointThread` is stopped?
HTTPS and the client-side certificates are two different things though, right? Having HTTPS-configured without using client-certs seems like a valid setup. 
I'm not sure if it is good practice to ignore `null` referenced streams. Why not let it fail here? We might hide other errors by skipping the problematic stream here. 
Ensure service is still valid and enabled.  
I dislike these manual `init()` and `start()`, and the fact that you return a PageCache out for which you cannot really stop the sweeper thread. I would like to have the `StandalonePageCacheFactory` perhaps be renamed and be something implementing AutoCloseable, where the page cache is created in the constructor, and it plus the lifecycled page cache added to an internal LifeSupport, which is `shutdown()` in `close()` 
Nitpick: I think it's a good practice to group all the final fields together (so that one can easily see where the mutable state is). 
+docs 
You deleted formatting whitespace before a method. Run Code->Reformat Code 
It seems character encoding is not right.  
Rename to "pool"
i purposefully made them not consistent 
"or" --> "of" 
I'm not sure how likely it would be, but should we do any string trimming on the `input` here to remove whitespace if a user passes a single space character in?  
No comma 
Can this be on one line now?
same as previous comment from `spring-test` mock. 
if the key isn't in the cache (e.g. concurrent invalidations) then this will decrease incorrectly. I think you need to check `val` and skip the locking code if not present.
can be normalized if the first arguement is a null literal 
@ajinkyakolhe112 remember to format also this file :) 
format issue, line limitation: 100 chars 
I'd prefer not to require a content type, just set it to application/binary.  Calls to setHeader on the request will respect/override the contentType appropriately. 
what would break if there was just   rand +  func_75902_a(Math.min(10, totalWeight - rand))   getting rid of the need for the accessor changes to the biome lists 
Should this be "Map operation can have only one parent"? 
ahh, this does look really fast 
I don't think we should make this change or add the additional `init` method above.  This is something that can and should be handled outside of the library.  When you're about to load the calendar, do the min/max calculation yourself, and then implement a custom `dateConfiguredListener` to handle the selectability of the dates you actually care about.  @JakeWharton thoughts?  The `containsDate`, `clearHighlightedDates`, and `scrollToDate` additional all seem fine to me. 
I think we should probably have an `Exclude` that pairs with the `Include` above. I don't know if having a bunch of well-known excludes is the way to go though. I have no better idea at this point. 
Replace DESCRIBE operation on rootRegistration with rootRegistration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE); 
This check would fail on itself here, am I right? 
Essentially what we do inside the ODK as well :) 
IMO this should live in the exception class. 
Why don't you check if `ifNotNullBlock` is not null ? 
I wonder, instead of taking a `CompressedObjectStragegy.CompressionStrategy`, it might be useful to have a new interface that knows how to serialize stuff?  So like a `DimensionSerializer` or even a `DimensionColumnPartSerde` that just compresses the column itself? 
Shouldn't `AppLinkNavigation.APP_LINK_NAVIGATE_OUT_EVENT_NAME` and `AppLinks.APP_LINK_NAVIGATE_IN_EVENT_NAME` be in the same class? 
Given how we are doing this in multiple places now it may make sense to create an interface to allow people to specify additional compression/decompression methods in a more generic way.  For example if someone wants to use bzip they would have to re-implement `NetworkEventReporterImpl` as well as the `RequestBodyHelper`. If we had a simple registry system from Content-Encoding to an interface that exposes a  compress and decompress function it would enable this. 
optimized slightly 
we usually use info("some log string {}", value); to avoid string concat when logging is disabled. 
I should probably have asked this in the previous review, but why "addFollowingAccounts"? We don't talk about accounts mostly in other parts of the code. It could be ambiguous with the BIP32 feature of the same name. 
I think equals is wrong here. I would recommend using `MediaTypes.typeEqual` to ignore the possible charset encoding or other possible parameters at the end of content type. 
same comment as above 
Couldn't this be: ```` uriVariables = bestPattern.matchAndExtract(lookupPath); ````
will this work in screwdriver? 
Not thread-safe, please make volatile
sgtm 
This one is not necessary, the next statement will return (without doing any I/O operation). 
This should be logged as error, if an exception gets this far it's most likely a bug in the custom menu items. 
Should this be in an internal package? I don't think it's our responsibility to expose this in a public API. 
Why are you using `isReportIterations()` instead of  `isParameterized()`? `doRunFeature` only tests for `isParameterized()` to invoke the `runParameterizedFeature` method. Why don't you just schedule every feature, otherwise we have a strong coupling to the scheduling implementation in the ParameterizedSpecRunner. 
We have to emit a `StreamsChangedEvent` here to make sure the stream router gets updated with the new default stream. This is needed because the periodical might run when the stream router has already been loaded. 
Why did you do this? Now we got a cas statement extra. We know only a single thread can touch it. So there is no need for this. 
The close needs to happen even if recordReader throws. 
Ideally, use complete sentences.  Say something like "Unresolvable devices are typically not relevant outside of scan range.  Hence, we specially clean them from the cache." 
According to current implementation of `copyMsgToBuffer`, if size of `m.getOut()` is not large enough to contain both header and data of `mResponseMessage`, then, data will be truncated, then `mResponseMessage.finishSending()` will be `false`, so `mSession.close()` won't be called.  So what will happen to remaining data in `mResponseMessage`, and if `mSession` is not closed, what will happen then? will there be another data request? but I can not find logic like that. 
This looks odd. Should just `vi>vj`, `vi<vj` and some special cases like NaN be handled instead? I do not see what `floatEquals` buys here. 
If TiledMapTileMapObject supersedes TextureMapObject, we can get rid of all this comment block too. 
Replace this entire try {} by  {Code}  try (InputStream in = new FileInputStream(this.configurationFile)) {   this.configProps.load(in); } 
We don't want to ignore this exception.  Let it fail the test if need be. 
create times => CreateTime 
It's a new type. No need to keep deprecated methods. Same applies for all methods in `v4` package. 
This is an array.
You will probably want to ensure an ItemComponent exists on this first before doing this check.  This has bit me more times than I care to admit. 
ensureYellow should be enough 
nit: `BLE` would be better, also this should be named to better distinguish it from others.  I would maybe rename `checkIfBluetoothCanAdvertise` to `hasBleAdvertiseCapability` and this to `checkAndWarnBleAdvertiseCapability` or just meld them into one method. 
I addressed this compatibility issue in  https://github.com/Netflix/feign/pull/90  @adriancole Should we just cherry pick that into master? 
would it make sense to use the Path as key directly? All usages involve `path.outputName()` and I think just looking at this class it is unclear what the key should be 
can you move the expectedException after the first `.next()` call? otherwise it doesn't verify if the first call works 
Does this need to be public? 
What are we protecting here against?  It is logical to expect that there will be some annotated glue classes when we use SpringFactory, but imagine there are some scenarios that do not depend on Spring contexts and we have SpringFactory in our class path - would not it be better for such scenarios to execute peacefully even if their glue classes are not annotated, and when they are called individually? 
The Java Validation annotations should be added to the method parameters as well so that Jersey Bean Validation could work. 
this too 
Personally I feel this API should not be exposed to the users, but only to "developers". 
We should log by using `Log.e` method call. 
is subpath a term? shouldn't this be sub-directory? 
Is it safe to use `ImmediateEventExecutor` really, for any pool implementations? 
I think we have multiple query generators as well. Is there a way to combine them into one general purpose query generator? 
I like the testing predicates! I assume that `includes(fn)` makes sure that all the contents of `fn` is included, and properly namespaced based on `fn`? 
Can you assert their type here also? 
Javadoc 
Same comment as for other similar code. 
Please flag this with a TODO to switch to prepared statements 
Can you provide some more explanation on why you think this method is required? 
I don't like the idea of deprecating this method so soon. Anyone who overrides this method in a class that extends `Theories` would likely be broken by these changes.  Instead of passing the `TestClass` instance into the `ParentRunner` constructor, why not add a static factory method to `TestClass` that has a cache mapping `Class` to `TestClass`? 
This is two hashmap lookups for each element. The check can be done only once in the open method 
Please run "Reformat Code" once (prevents unnecessary code formatting changes in the future). 
Since the AccumulatorRegistry is only used task-internally, and always retrieved form there, it should be initialized internally. Saves one more constructor parameter and helps with separation of concerns. 
"type" is just a comma delimited list of subsystems that are mounted on a hierarchy. Cgroup does not support mounting the same set of subsystems on multiple heirarchies (a.k.a mirrored hierarchies).  Thus, using the comma delimited list of subsystems as key is going to be distinct 
Our standard for enums is camel case, so `PolicyConf`. Actually, `PolicyConfigKey` would be consident with other patterns in the code (e.g., `SystemConfigKey`).
Maybe using `rotation.time.interval.ms` to indicate time unit. 
Please move the BooleanSupplier definition outside and assign it to a variable. Otherwise it's re-created for each iteration
ok so to be clear, this code deems a new supervisor "bad" at first. Then eventually graduates it to good, as long as its score doesn't get incremented.
fileswitch -> default here 
Formatting 
Only the CERT_TRUST_STATUS is embedded in the structure. The other elements are Pointers, so need to be bound as `.ByReference`
Should be `checkArgument` 
Since Proto (and Thrift) use getTtl/setTtl, our code should probably do that too. I agree with @aaudiber that it makes sense to do that in a follow up though. 
This could maybe be refactored out, it now seems to be used in about four places. 
Dont use java.util.Vector, use ArrayList 
It would be nice to centralise these numbers in a common place 
Use a constant instead.
Please remove blank line. 
Why do cleanup  based on this condition? What do you think about doing this all the time? If you do decide to keep it condition based, please add a comment here to describe why this is being done 
Add some empty lines between static and none static fields. And add space between fields and methods. 
Whats the point printing empty string to the console? 
Can we remove `jsonlite` here now that we don't require it for data preview? 
Add a TODO... this should be returned as part of the "plan" operation. 
QueryToolChest.filterSegments(..) returns an impl of this , so this needs to be an extension point.
I'm unclear here why you would call `immutableReader` if you already had a copy of the `FsChannelImmutableReader`? It seems like it is cloning the current reader and incrementing the ref on the channel reference? If that's the case, maybe `.clone()` would be a better name for it? 
Package scope? Or am I not foreseeing some use for these by plugins? 
Using a constant  ``` private static final List<Throwable> NO_VALIDATION_ERROS = Collections.emptyList(); ```  would be nice. 
As much as I don't love creating things like this, it allows us to work even when the field isn't present, yet. This is how we addressed other minor schema changes such as pre-aggregated deps and ipv6. 
please invert the condition. this is really strange to consider all loops as infinite _except_ `o.getExpression() != null` or block == nul or ... etc 
single line instead of 2 lines? 
Can you try this instead of the `getHandshakeResource`:  ``` java AtmosphereResource res = atmosphereResourceFactory.find(resource.uuid()); ```  That will saves us one lookup in the attribute's map. The uuid should be the proper one. If that works just update this patch. Thanks for all the help! 
Nice :) I like how we support different optimizations without worrying about it too much. 
can be simplified to   return searcherContext.found ? 
Nitpick: `unless a value is already associated` reads better, I think. We need to document the return value since we have now added that. Also, we should make it clear that this may or may not be atomic (as people will expect it to be atomic given `ConcurrentMap.putIfAbsent`). 
Seems like the result of this should be `"bar<7 spaces>"` not `"bar"` 
The method provides location? 
Update the log message 
nice. 
name -> ID 
Tests that pinning/unpinning ...
This can also be if (tx.getHash.equals(rejectedObjectHash)) as .equals(null) is defined to return false. 
volatile 
RESTORE_SNAPSHOT must not be allowed on write-disabled tables, pls remove
Looks like that the `len` variable is redundant. We could directly use `field.length` in the loop condition.
Does this method override a method? If so, please add @Override 
The loop can be removed now (and just replace).
is it possible that instanceState hasn't yet been set here?
It was expected that the whole collection be copied in here. In the case of the IAMCredential, for example, it will have more than one header. 
Would read better to remove the `is`. 
Please don't use wildcard imports 
NIT: can this just be called `mPipeline`?
same 
What's up with this? 
remove `this`
Maybe add that both are needed when returning this value to core. At least I was a bit confused by this. 
This should be innerHTML and not src.   Since you've got the no-callback form special-cased, you should add tests for this case in mobile-spec. Maybe verify they work by using a follow-up call that does have a return value. 
Should be this be commented out? 
Are you trying to achieve scheduling with fixed delay with this schedule-at-the-end-of-a-run construct? 
0 is not a power of 2. 
Now it is :) 
Maybe add a helper for this, since it is duplicated below 
when replacing paused boolean with finished one here, afaik finished must be set at all catch cases at innerCollect where paused was set to false... 
I would rather to have 2 different methods `getSanitizedPath` and `getSanitizedParameters`. 
We should also then adjust this to cast to map and `get("commitMeta")` 
I would like this patch a lot better if it introduced a new attribute (say "filter-spec"; better names are welcome) and deprecated the old "filter" attribute, marking it as an alternative to "filter-spec". The "filter" attribute would not actually be stored in the model -- it would be synthetic, read from and written to the filter-spec attribute. This filterToModel method would be the basis of the read-attribute handler for the deprecated "filter" attribute -- pass in the filter-spec value stored in the model and get back the legacy "filter"  complex attribute value. A reverse method would need to be written for the add handler and for write-attribute -- take a complex attribute and store it in "filter-spec" as a string.   That would be a fully backward compatible solution, and since the old "filter" is properly deprecated we could drop it in AS 8.  I'm not suggesting supporting the old attribute in the xml. If people want that they can just use the old version of the xsd. 
static import 
May be able to just use this for all -- not sure why the parameter is used to begin with. 
Changing it this way will force two new object allocations for each message (and single messages are the norm). Could we refactor this so that we don't have to do those two allocations and simply change the `ProcessBufferProcessor#onEvent` to figure out whether to invoke the `MessageFilter` more than once? 
Rename to OAuth2AuthorizationRequestRedirectFilter
why is this no longer a constructor? 
Can we validate that there are no null values 
... this is the calling code 
see https://github.com/druid-io/druid/pull/2521/files#r53891406 
wrong jsdoc here 
What are these for? We shouldn't be encouraging people to serialize these instances. 
static import 
should we emit some kind of warning here? 
Please mark the method also as @Deprecated... Not only in the documentation....
no need for local vars here, just use values on stmt 
sure. 
there's some formatting problems in the PR 
`Displays information for all files and directories under the specified path recursively.` 
same 
the naming is inconsistent 
Extra space. 
Needs `@since 1.4`. 
Maybe extract the `0.5f` into a constant called `FLOAT_FUDGE` or something like that, with a comment explaining why this helps?  Same thing for the `- 2` below? 
Could ppDacl and ppSacl replaced with WinNT.ACL? 
Why not use [`TransactionStatus#canRollback()`](https://docs.jboss.org/hibernate/orm/5.0/javadocs/org/hibernate/resource/transaction/spi/TransactionStatus.html#canRollback--) here? 
That description is kind of loose. What about the dreaded comma vs dot issue, for example? Also who writes currency amounts in scientific notation? 
can we add a note about what is for backwards compatibility? 
``` final StatsProvider statsProvider = getOptionalStringArg(cmdline, "pd")   .transform(new Function<String, StatsProvider>() {     @override      public StatsProvider apply(String name) {       return ReflectionUtils.newInstance(name.get(), StatsProvider.class);     }     }).or(new NullStatsProvider()); ``` 
The modified files had too many warnings, reduced and extracted them to simplify the review of next commit 
setter could be made Nullable as limit() on the CollectNode can be Null anyway. So you can avoid the null check 
`Gets` 
Don't leave this empty - add call to (implicit) _super()_ as this enables setting a breakpoint in the constructor 
Reverse: TestNG is actual, then expected (JUnit is the opposite). 
inline this method, since it just throws and exception. You can remove the comment too 
This won't work - the function is declared as:  ``` c Status XGetWMProtocols(Display *display, Window w, Atom     **protocols_return, int *count_return);  ```  protocols_return is a pointer to an array of atoms (following the documentation). The array of atoms is allocated on the callee side and not on the java side. As an Atom is basicly a primitive long, I only see the option to bind this as a PointerByReference. From that you have to extract the data itself and in the end free the list:  ``` java         X11.Atom[] atomList = new X11.Atom[count.getValue()];         for(int i = count.getValue() - 1; i >= 0; i--) {             atomList[i] = new X11.Atom(protocols.getValue().getLong(X11.Atom.SIZE * i));         }         X11.INSTANCE.XFree(protocols.getValue()); ``` 
`originalTimestamp` can be null here, causing an NPE 
Do we have a sense of why this file lock is still held?  Even if this check is bad because it can't be truly reliable, IIRC in the past this test didn't fail every time, so I fear we broke something. 
Please add Apache license header
Should not it throw on a null callable? What's the point of calling with null? 
I like the idea of having multiple adapters but instead of another wrapper adapter implementation, I'd introduce a new adapter method in Logger ``` Logger.init()   .addLogAdapter(new AndroidLogAdapter())   .addLogAdapter(new AndroidFileLogAdapter()) ```  This would be more intuitive. We can still keep the old one as deprecated to provide backward compability and put deprecated annotation
The cache control headers are to be inserted ONLY IF the filter is rendering the response, not if the filter is forwarding along the chain. You may end up setting cache headers on assets among other things significantly killing performance both for clients and the server. 
the consistency check level to apply to this property
the [0] here seems volatile 
init the variable at the variable declaration. 
I don't think this is needed, since you should not able to create a table unless the table currently does not exist and in that cause you could not have partition actions. 
Do these really need to be moved?  It is cleaner to have them grouped nicely, however that's a formatting change and should be included as a separate PR. https://github.com/zaproxy/zaproxy/wiki/DevGuidelines#formatting
Add a comment about what this is testing. From what I can tell it is that a in-memory realm is not fully deleted until all threads has released their instance. 
I don't think this should be changed. Moreover, this is named wrong already. The boolean signals whether or not an image was loaded from cache. 
This code can be simplified, I think. If the capping of playbackPositionUs to be within bounds is done before the relativePlaybackPositionUs calculation- at line 782, some of the if/else checks that follows can be avoided.  Then Util.binarySearchFloor can be used in both cases.  If the position has reached (beyond) the end, and isReset is false, chunkIndex = mediaPlaylist.segments.size() can be returned, to keep the current method return value behaviour.  
Needs a test. 
you can just declare the test as `throws Exception`
Extra space on this line. 
Could we simplify this with https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/ToStringBuilder.html? 
No it's not the same ;) 
Your commit message disagrees with this method name. Is that because `doOnCompleted` just mutates the `Observable` rather than actually subscribing? 
can't this be wrapped by a transport exception if this ends up being a remote operation? mayne use the new `assertThrows` on `RestStatus.NOT_FOUND`? 
Could you please remove this empty line? 
consider using an enum instead of boolean as return value for better readability 
The `@return` clause mentions nodes, but this is a relationship. This comment is also inconsistent with the other two in that it has no `<b>Note</b>:` part. 
Use _assertEquals_ in case the non-zero value can help diagnose why the test failed. 
formatting seems off 
make this some nice and round number. E.g. `65_536`. Preferably expressed as 0xFFFF 
I don't understand this comment, especially when looking at the code.  I realize that this is somewhat copypasta, but it should still make sense, and I don't think it does right now. 
Can you add some javadoc? 
Should this have a null check like `getValue(int, String)`? 
do you plan to put this use of TimeUtils back in at some point? Might make sense to remove TimeUtils from this PR until you actually want to use it. 
This could fail if args[0] is accidentally something not cast-able to a long. I would suggest just passing `args` to the `Raw` class and keeping the existing args parsing and error handling logic that was in place in the `Raw` class. 
This should use a ServletContextListener to do the uninject 
same as the above comment. 
Might be worth noting what needs synchronization (accessed by heartbeat thread and user thread) and what is safe. I was having trouble sorting out which methods need synchronization and which ones don't. Seems like the shared state is `heartbeat`, `state`, `client`, `time`, `groupId`, `retryBackoffMs` (where `time`, `groupId`, `retryBackoffMs` are threadsafe) 
`@see #setOnBlah` 
Your implementation doesn't account for callbacks which have a return value. This was mentioned in the original issue as something we should reject in the parsing part. 
Would be great to have some tests that exercise some batched announcements and then unannouncements and reannouncements and stuff like that. 
I think most of these import (or variable) test cases should be moved to a test for the pre-processor. This way the current tests focusses purely on actual parsing and the pre-processor test focusses on pre-processing. 
nit: formatting 
Can this be private? It only seems to be used internally. 
This shouldn't have changed. 
with slf4j use paramerized logging http://slf4j.org/faq.html#logging_performance 
For the javadoc I would copy the javadoc from executor.execute:  ``` RejectedExecutionException - if this task cannot be accepted for execution. ``` 
Layer violation. 
the result of plan is already casted to NonDistributedGroupBy, so this check is redundant 
Ok, we really need to extract this dirty piece of code into a separate class 
Usually we don't return handlers (because the user code knows what was set). Is there a reason for this one to be present?
Inline 
After checking with @StefanRRichter, it seems this check is unnecessary anyway since `org.apache.flink.core.memory.MemoryUtils#UNSAFE` is getting the class if needed and if not existing, Flink should not start anyway.
needs test 
Slightly confusing that `force` does not let you do this.
is the syncing recursive?
Use `ByteUnit`? 
but we're still not getting e root cause , no ? 
This test is not necessary. 
whereArgs is never null, isn't it? 
I'm not really happy with this API, open to suggestions 
Indentation 
Rather than providing overrideable ways to set the client, maybe we can add the necessary constructors to EurekaBootstrap:  ``` public EurekaBootstrap(ApplicationInfoManager infoManager, EurekaClient client) {     this... = ... }  public EurekaBootstrap() {     this(null, null); }  ``` 
Is there a reason we don't `lock.countDown()` in here? 
Or, would this be more appropriate if it were called "prepareUfsFilePath"? 
same thing here... but it can go in the outer `finally` block, just after `catch (InterruptedException e1)` 
Not project style for spaces, should be:  }<space>else if((headers == null && headersPos != 0) || (headers != null && headersPos == 0))<space>{   Easiest thing is to look at the pre-existing style in the file and just copy that :) 
No, this is only used for connections right now. 
Ha! Yes it should :-) 
We need to check if `mScreencastDispatcher` is non-null and not overwrite it with a new reference. Otherwise we could have 2 of these pushing screencasts to two separate clients, and one of them will never ever get a `stopScreencast()` call. 
same here 
I am wondering would it be better to have this logic in `kafka.Kafka.main()` instead of in the exception?   Also it seems that after calling shtudownSystem() the thread will continue to run in this case, which is different from the previous behavior, i.e. system.exit() does not return. If we do so we need to inspect all the cases where we call `System.exit()` and make sure all the threads will exit after we change it to throw the exception.  By putting this logic in `kafka.Kafka.main()`, we can still call System.exit() in any of the Kafka thread after catching the `FatalExitError` exception and it is guaranteed the thread won't run anymore. 
Do we need equals / hashCode? This doesn't seem like the type of class you'd use in a collection, or that you would be comparing. I don't have a great sense of when is appropriate to implement these, but I prefer to leave these out until it's clear how and why they are needed. 
same here, use the backwards compat method 
`Set` + `LinkedHashSet`? 
nit: Can you fix alignment? I know the convention here is a little annoying to follow, but it does make it easy to read the schemas. 
you need to bindTo here also 
Parameter should be called `siteId` rather than `sideId`. 
yes it did, updated it to just ignore the null 
I'll merge this now as it fixes the breakage I introduced, would you mind adding tests in a follow up PR though? 
final 
Just call `toString()`. 
same here 
I found this line elegant but also confusing to read. Maybe a more imperative version would improve readability (and also improve perf a bit).
What calls this? 
Same comment as above. 
Throw an `Error` if you don't expect this to fail. Otherwise it should be handled properly. e.g: - Unwrap `InvocationTargetException` and rethrow the cause. - Throw an `Error` for other impossible exceptions such as `IllegalAccessException` and `InstantiationException`. 
This is simple but I wonder if there’s a datastructure better suited to this. I’m thinking about Android and the amount of boxing and unboxing that happens here.  (I guess we shouldn’t worry about micro-optimizations until we know the code is working!) 
I think adding a Rectangle class to the API is confusing. Users don't need any new feature besides the position/width so it shouldn't be in the API. The union is used internally by the `PreviewModelImpl` and can be called in a different way than by subclassing Rectangle. 
I think we need to make sure `getRole()` isn't null here, otherwise there could be a NPE. 
Close the realm. Do it with a try-finally. See notification tests 
This is new code that didn't exist in storm proper.  I think it would be cleaner to have this be a debug message instead of an info message.  Also could you use "{}" substitution instead of +?  ```         LOG.info("Zookeeper state update: {}, {}, {}", ZkKeeperStates.getStateName(state),  ZkEventTypes.getStateName(type), path); ``` 
it's more similar to the rest this way 
Can you delete this constant? 
check hash functions in guava here?  http://docs.guava-libraries.googlecode.com/git-history/master/javadoc/com/google/common/hash/Hashing.html I assume we don't need heavy-weight hash functions but choices like CRC might be sufficient. 
Make this a constant as well, so we always return a constant string (seems better than creating a new string each time) 
Is this not needed? 
receive - > emit? 
why a copy? 
No need to fix this right away. But "backend" code referencing "UI" code is always an error. In this case `MessageCryptoSplitter` and friends should probably not live in the UI package. If there's a real dependency on some UI-related code there's an abstraction missing. 
Is this branch being tested by a unit test?
`nextFlush != null` was way more clear to me than `indentLevel != -1`. I can't tell you how long I spent staring at the `indentLevel != -1` looking confused at what it was doing.
change to BROWSER 
Let's put the code in the matching package structure, in this case, we could use "com.baeldung.chartoarray"
Should indicate that this is executor service will use daemon threads? 
typo: `chack` 
no raw types pls .-. 
Why you decided to go with Rx here? `executeAsBlocking()` will be faster! 
private final 
It's best to do an `isFinishing()` check here, ie:  ``` if (!isFinishing) {    refreshDetails() } ```  It doesn't happen often, but it's possible for the callback to fire after the activity is finished, resulting in a crash if you try to access its UI. The `isFinishing()` check avoid this. This is one of the benefits of the `EventBus`. 
Can probably remove this comment since #290 is addressing this as part of KAFKA-1843. 
s/Number/number 
is this commenting style OK with Presto @dain ? 
in beforeTest() reset()  is a wipeDataDirectories() call.. I think that should do that already. 
I think you can make this much simpler by using `Arrays.asList(elements)` 
I think there is a race condition here. If the app crashes before here, we'll have two jobs with the same singleId. Is ugly but i guess we'll have to make it a transaction in the persistentQueue such that cancellation of the old one (if exists) and the new job should be done together. (haven't checked below yet so ignore if you are already handling it). 
maybe we should remove these assertions from all tests beside SQLResponseTest or another IT ? 
I'm probably missing something subtle here but in the previous test the pipe character was specifically used, suggesting it's the correct separator. This test seems to suggest it's among the wrong choices.... 
Again I think all of these should be debug messages, we don't need them printed out all the time, but we can configure them on if we are doing debugging. 
Comments need updated, now generated by the server. 
maybe wrap inside a `isWarnEnabled` block to avoid varargs object array allocations
Same as above.
Delete. 
Here and elsewhere can we throw the original exception and not wrap in RuntimeException?
nit: space before `:` 
why srcInode's lastmodificationtime not get changed here? 
What is a static initializer method?  I think I intended the `staticInitializerBlocks` field to hold this info but never got around to implementing
Can you fix the indentation? 
PMD dislikes this as well 😉  . 
http://developer.android.com/reference/android/text/format/Formatter.html#formatFileSize(android.content.Context,%20long) 
How about using `Collections.newSetFromMap`? http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#newSetFromMap%28java.util.Map%29 
Can this just be a Runnable? 
there is a static notNull predicate in guava 
seriously? 
The registered service is put into the context here, only if a service is extracted.  
double space here 
Add a comment like this:  `// TODO: this is a temporary hack that should be removed when the new planner is introduced.`  (@martint is currently working revamping our new planner. It will take a while though.) 
Could this result in other possible exceptions thrown in KafkaConsumer.poll / commit ? 
this comment is confusing, when testing local there will only be one worker ... get rid of this 
Perhaps use `otrClient.getDisplayId()` directly in `getString` since this variable is not used elsewhere...?
Indentation looks wonky. 
Unused import.
Ditto 
I'm not quite sure the latter two methods should be in `ResultSubpartition` now since they are quite internal. `increaseBuffersInBacklog()` is only called by `PipelinedSubpartition` and `SpillableSubpartition`. `decreaseBuffersInBacklog()` is (additionally) only by spilled/spillable subpartition views and therefore could be package-private in `SpillableSubpartition` only.
Where is the streams being used?
These javadocs are formatted horridly - remember that its primary purpose is to render in an emitter. 
Please fix the indentation here 
Shouldn't you be getting this option in a way similar to this?  ``` java SharedPreferences prefs = context.getSharedPreferences(PushPlugin.COM_ADOBE_PHONEGAP_PUSH, Context.MODE_PRIVATE); boolean force_show = prefs.getBoolean(FORCE_SHOW, false); ```  Accessing FORCE_SHOW directly is only targeting the `String` defined in PushConstants, and a `String` is always true'ish, thus making it not an option to decide on. 
This has to be consistent with `EQUAL`. However, `EQUAL` changes its behavior based on padding option. We may want to just remove that config flag 
This should also be updated depending on the outcome of the naming discussion. 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=365704 is no longer enough, as setting eclipseLink.target-server to "jboss", will only cover lookup of the TransactionManager, but I don't think that will enable this TransactionSynchronizationRegistry workaround.  
albeit unlikely the middle bits will throw, I'd add a try-finally. Also note server-modules are language level 8, so you can do a lambda 
I would prefer not to use null ... just a empty set  and then assert that its not null 
consider just having two constructors in lieu of the builder. 
Should we use ATOMIC_MOVE here? 
revert 
This case is strange. I would just throw an NPE. For a varargs to be null the user would have had to explicitly call it with `(String[]) null`. 
@rculbertson I get -1 on my boot2docker version: v1.3.2, Git commit: e41a9ae. executionDriver() returns "native-0.2"  What version of boot2docker are you using? 
Would it be possible to use one of the tables defined in T3 or TableDefinitions?
You probably want a lower-case `boolean` here (`Boolean` is a boxed type and is nullable)  
This looks more like a debug statement to me. 
Calling process.getInputStream() gives you the stream to read data sent to stdout by child process. 
up a line 
can we make this into an enum that has a method fromString(String ordering)? 
ditto 
I think we should offer default implementations of these three methods as well:  getCacheStrategy() => null, preMergeQueryDecoration() => runner postMergeQueryDecoration() => runner 
Should it not include interacting e.g. Flint and Steel? 
Not used 
It should be used 20, right? (That was the default value used when reading from configuration file.)
this must be true by default. 
why is this different to the one used in the SelectAnalysis? 
Insert one space before the opening curly brace (please also fix the other occurrences) 
no need for final here btw :-) 
Missing license header 
Is \z some special token for new lines on any platform? I have not seen this before? 
In retrospect, reseting the task here was probably a mistake since we're not actually in the group yet, right? 
Same here
I would add this class to `MetadataEqualsHashCodeTest` 
Maybe add `@Nullable` for this method?
sort the setters?
Done. 
Is it possible for passwd to be null, if tokenList is the correct size? 
It's unsafe to cast your List to ArrayList.  If you change Notification.generateEmptyList(..) realization it's possible to get ClassCastException Use new ArrayList(notifications); 
This way it looks better :s 
I think you shouldn't clone the body of the method and you should use the method `callSuperMethod` from `APTCodeModelHelper` ([here](https://github.com/excilys/androidannotations/blob/develop/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/APTCodeModelHelper.java#L171:L185)) instead. Because we are not sure that the annotation will be processed if the content of the method changes. 
can be static
make them final 
I'd add a javadoc comment here so it is more apparent the returned instance uses the identity function for comparison. 
I also removed this additional level of indirection. Please, review that its ok. 
"Sum" and "+1" does not go together... Should it be "count"? 
remove whitespaces with `String.trim()` before checking for `length() == 0`. 
You can change these explicit asserts into `buf()` calls that stores the result to a local variable. 
Add a comment on the next line about intentionally falling through to the next switch case 
' .. because the I/O thread has been interrupted.  Use shutdown() to shut the NioSelector down.' 
I'd remove the word FBOBuilder. 
dig. 
I don't think this is strictly necessary. It's one of those things a human writes because it knows `Thing.Thang` carries semantic value whereas a soulless (killing?) machine doesn't need it. 
If someone overflows a long, we'll all be retired or dead by the time they come to report the problem. 
This is probably just OCD but you could do a `for` loop an have less duplication. I think that would be a lot cleaner. 
Use `java.lang.String#format(java.lang.String, java.lang.Object...)`, something like :  ``` java String.format("%4d. %s %s %n", x++, ". Unused... ", m.getKey().getLocation()) ```  `4` is hard coded here, but that would work up to 9999 hint. It's still possible to compute that value if hard coded value don't work. 
This can also be deleted, the selection already displays the alert.
same here, could use the `FutureActionListener`
Perhaps a small description saying that this test is nondeterministic and depends on the GC doing it's job at the wrong time. Right now it is not all clear what exactly could go wrong here. The description for this PR might be shortened and used as description as it is very clear about what is wrong  
Make use of the HazelcastTestSupport.getOperationService method which returns the InternalOperationService. 
It seems character encoding is not right.  
Is this method meant to be overridden or accessed by subclasses? How about making it final (and also private if possible)? 
Can you make this a interface?  You can move the fields to the local implementation and don't need the static constructor for now. 
Unnecessary 
Is this used? 
These could be proper javadocs 
nit: revert 
do u still want to retry? 
fix import order 
provide exception description 
Are the \n because the sql formatter inserts them? It'd be more robust to test that the queries are syntactically equivalent, instead (by comparing their ASTs) 
`IOException` is not thrown here, so this is redundant. 
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Position literals first in String comparisons](https://www.codacy.com/app/checkstyle/checkstyle/file/3961453439/issues/source?bid=2193633&fileBranchId=3722095#l556) 
Why do we need empty constructor?
Is the factory class implemented already? If not, please add a TODO here. Similar for the provider. 
Please format and remove spaces
Probably should be `OrgLoader` based on changes made elsewhere. 
Could we use a shorten version `Validation.buildDefaultValidatorFactory().getValidator()`? The Hibernate provider will be loaded dynamically and we don't test validation of `Optional` values. 
nifty 
Add a variable for `HdfsEnvironment` 
This field can be final. 
more elegant and less lines == we won 
Space between words and equals sign 
It's nice to have them in the interface so that users can work with `FileSystem`s instead of needing to use an abstract or concrete class to have access to convenience methods. 
Again, I'm hesitant to change something like this on a point release. We don't recommend running `/hystrix.stream` through zuul. 
Leaving out the last placeholder (`{}`) in the message would print the exception's stack trace instead of just calling the `toString()` method: http://www.slf4j.org/faq.html#paramException 
It's missing the `@Override` annotation (same for other `getValue` methods).
Don't leave this empty - add call to (implicit) _super()_ as this enables setting a breakpoint in the constructor 
Please add { } even if its a single line statement. 
why is this reordered?
This cast is also unsafe. Tuple2 is final, therefore we don't need to use Object here I think. 
This IOException is swallowed either, should we re-throw it?
 - The null check can be removed (already done earlier).  - Mixed indentation chars.
So this is the only new code (non conversion of spaces to tabs).  Basically just use one gesture detector for both fling remove and longpress detection. 
Redundant method 
For windowed store's cache, since we control the serialization format of the windowed key, could we consider using a more efficient comparator than the default `Arrays.equals` as in `Bytes`? For example, I think we only need to compare the bits for the timestamp fields, and treat all records with the same timestamp as the same (i.e. no ordering) since we know in windowed store we are always iterating over the whole window? 
final  
Shouldn't this be a 407? 
`return javaSymbolMap.values().contains(type)` ? 
Why do you think these lines are not executed? 
Seem the above two lines have indentation problem? 
AsyncTaskLoader should be imported from the support lib for compatibility. 
We should simply change the `Sorter` constructor to throw a `NullPointerException` if you pass in a `null` comparator. 
Before we were using `maxBlockId + 1` for the block id, but this changes it to `block.getBlockId()` in `readRemotely`. Is this intentional? How does this test pass? 
you really use java.lang.Error for that? While it is a problem which is similar to noclassdeferror, i find that pretty hard. done anyway :) 
This is used in only one place. I don't think you need a variable for it. 
Typo. 
pls make this method static by passing in the initialSettings
import order is not right:  http://tachyon-project.org/master/Startup-Tasks-for-New-Contributors.html http://tachyon-project.org/master/resources/order.importorder 
Please rename to `intValue()`. 
We may want to keep first refactor the aggregator querying code for use to query metrics, and just convert these tests to metrics?
make the separator `,` a constant
Wouldn't it be possible to return early here and just use an empty assignmentList?  I'm not sure if it makes sense to have the verification further below that global settings don't conflict with session settings 
If I understand correctly, this code only runs when the app is opened, not when the push message arrives (That's what happens on my Device, anyway). If this is indeed the case, it can't update the counter badge until the app opened, which doesn't solve the bug - no?  
Maybe something like `setPdfViewBackgroundColor(background)` instead? setBackgroundPDF isn't very intuitive. 
It would be good to have javadocs for added methods 
BTW, I added constructors to ModelNode so now you can just say "new ModelNode(false)" 
Why do we explicitly remove children tickets? Most of the time, it's service tickets: aren't they removed at service ticket validation? 
`AlluxioMaster master = new AlluxioMaster(new MasterContext(new MasterSource))`? 
See other comment 
Same with this -- it ends up calling scheduleSplitWorker under the covers 
This error number conflicts with the error numbers in #697. Since those error codes shipped in the 4.4 release of the optimized fork, it would be helpful if `NONCONFORMING_LR_RULE` was renumbered as error 169 (leaving space for 165 through 168 to be added to this project when #697 is ready). 
The responsibility of this class seems to be to deal with job (un)deploys. Can we call it `Jobs` instead of generic `Utils`? 
Here and the previous lines you can remove some since for DS we only have --- Problems for relative address to root ["data-source" => "*"]: Missing attributes in current: []; missing in legacy [elytron-enabled, credential-reference, authentication-context] 
Use `StandardCharsets.UTF_8` 
is `-1` used because there is no tier associated with the under storage? Could you set it to be a constant? Its unfortunate there is no invalid value for the tier, ideally we should just leave the tier field unset in this case (similarly for sessionid).
just check size of partitionedByColumns 
For consistency should use `onAttachedToWindow()` 
Can we call this html for continuity.  
empty line 
Shouldn't this also be updated to reflect the new changes? 
Why do we throw here, but not in `get()` 
perhaps I'm daft, how do we handle this case now? 
There are some additional corner cases to test. What if collection null. What if argument <=0. Etc etc. I'm sure you can come up with some additional cases. 
I'd prefer "-robolectric-" over ".robolectric-", more maveney. 
Actually, to have better portability, could we use `tachyon.util.io.PathUtils#concatPath` for this path calculation? 
The code was written in that way because the files will be located under the given path directory and `cloudBlobDirectory.listBlobs()` can return files (`CloudBlob`) or virtual directories (`CloudBlobDirectory`).  I'll change the code to get a flat list of all files under the given path and then delete each one of them. If no file was deleted, a warn log message will be filed. 
This comment is outdated now that this is in a separate method. Are we only ever allowed to drainBuffer() as part of resume or if we are not currently paused? Can we add a comment here to details these restrictions? 
Is the Kafka coding convention to do braces around single-line if statements? Because I've noticed them being skipped before, but I didn't speak up because I didn't know what your conventions are. 
comment on the sort order.
Do all databases support multiple column matching in IN expressions, like `WHERE (A, B) IN (select A1, B1 from ...)`? Or at least the ones that support this new strategy.  This could also be covered in tests, where currently a single-column PK is used.
@cberner  How about to replace "your query" with the specific query information(id, context, etc)?  It might be more meaningful (helpful) for the people who submitted the query.   Another question is:  if this "biggestQuery" has higher priority (e.g. we want to sacrifice other smaller queries to get the result of "biggestQuery" first),  is there any config or option? Thanks. 
can't we log and return null here as well instead of relying on ExecutionException occurence to print this message?
So this may be me misunderstanding, but putting the the `.indexShardStateChanged` call outside the mutex in these places looks like you could possibly get state changes out of order. Is there (or should there be) any order guarantee for `.indexShardStateChanged`? 
this is weird to hardcode `System.out` 
`assertThat(map).isEmpty()` 
Maybe make this abstract? or move the implementation from DBWrapper to DB? 
nit: space after `if` 
What calls this? What happens if the file is already complete?  What does "reinitialize" blocks mean? 
This shouldn't have changed. 
rename this `hdfsTemporaryDirectory` 
Delete this test. 
I think you can create the callback once in the open method and then pass the instance to all async calls. This way, you save a lot of instance creations 
Please add check for exception cause type and message, we must be sure that it's really expected exception. 
Checks for different NBT tags here 
Rename the variable to `mNonPersisted` and change the comment to:  `A list of non-persisted inodes encountered by the traversal.`  The reason for this is that the traverse function does not need to know that the inodes are to be persisted. It simply identifies the ones that are not persisted, which leaves the purpose of using this information up to the caller. 
It should be closing container, not Jedis connection. 
We don't use import *. This shouldn't have changed since our code style sets "class count to use with import *" to 9999. 
Following the standards agreed a while back, parameters should be final and variables don't have to be. 
- nit: We put `=` at the end. - How about using `/** ... */`? 
... Edges. \n (right now it\s .,) Vertices.... 
Looking at https://www.postgresql.org/docs/current/static/protocol-flow.html  Terminate there is no mentioning of the server having to send a closeComplete message?
it seems done is set to true in all cases and this will never be false. 
this should imho only be done in the if and else if block, otherwise bulk operations will generate mutliple job entries 
better to explain it. for example, you can simple add "(e.g., 777 for rwxrwxrwx)" after "digital representation" 
do we need copy in method name ? isAvailable() ? 
Please fix this codacy issue
Maybe better to revert the condition? If logging is bootstrapped, we can return early. Advantage is a reduction of a big _if_ block with identation. 
"Add" -> "Adds" 
Any specific reason for not using just the String literal here. As in just using String avroConfig; instead of creating String object. 
Revert 
The spacing is wrong, please reformat the changes 
Does not really throw `NoSuchEnvironmentException` is it. There's also a race condition here. Between the time you check `hasEnvironmentNamed` and call `environments.named`, some other thread could have added/removed the environment.  IMO, it's probably best to delegate straight to `environments.named` instead. 
I think you are not using this at all. 
as exception is dropped, should we at least log it ? 
done 
In the `AbstractTicketRegistry` in the `core-tickets` module,  the `getProxiedTicketInstance` method builds the delegators and we need specific ones for the OAuth tickets. 
FYI, I will probably leave these as `@GwtIncompatible`, since they're used only from other `@GwtIncompatible` code. (We might as well spare the GWT compiler the trouble of compiling and discarding them, and we might as well give ourselves the option of adding non-GWT-compatible code to them in the future.) I'll update the comment, though. 
same here 
`{@code ..}` 
same here 
Again, I don't think this is safe during concurrent writes 
Yes, this should be `static final`, updated. 
RR -> round robin 
Don't add a new method. Instead, add the parameter to the existing one.  Alternatively, if this is really only for testing, it should go in the test code, but I don't see a reason to do that here. 
why are we not using jackson library
I agree, I'll remove this and force the caller to specify which breaker. 
We could import `ChannelFlushPromiseNotifier.FlushCheckpoint` to make this shorter. 
I know. But this method is also being called from the outside (backup operation if I remember correctly) where there is no response object. In the future I want to get rid of the response objects completely so that when a response-packet is retrieved, direcly from the IO thread we can deal with the handling instead of having that response-thread. 
Any plans when to release v2? 
Ah, this must be the reason.   Let's not do this, this will cause confusion for a normal behavior. 
@srinivasupadhya @pshivana I do not see tests for the behaviours of `RunMultipleInstance.java`. Is it written somewhere else? Even `InstanceFactoryTest` when run with coverage did not touch any line in `RunMultipleInstance`. Am I missing something? 
Is this correct? Doesn't the `Host` header have the following format and cannot be parsed by `URI.create()`?  ``` Host = "Host" ":" host [ ":" port ] ; Section 3.2.2 ``` 
Do we need validation for this constraint? 
not a big fan either, but note we do use `convertToStringListIfBytesRefList` in two places. So I moved them to the builder instead. 
Same as before: can we get this from the `SocialProvider` enum? 
Also not clear why "numSegments - 1" here. 
can we add a serde test checking for this? 
Hmm, this breaks once we implement another `AuthenticationToken` which returns non-null in `#getCredentials()`.  What's the reason for the type check here?
What's leader in this context? The herder?  
Doesn't this mutate the position of the buf? (I hate ByteBuffers for this reason :-P) 
How to do you signify to retry forever? `-1`? 
Technically, any argument could be a ConnectorSession 
can we encapsulate this code in a method that does the delete and logging? 
https://github.com/Bukkit/Bukkit/pull/879/files#r6378930 
This logic makes sense, but what doesn't is what `currentTime` is expected to be after the loop on line 225. Because it gets reset on line 213, after the loop it seems to represent the time after the last tuple was deserialized but before it was handled. This seems really arbitrary. If that's really the intent could you add some comments below to clarify the time math that is occurring after the loop with `currentTime - startOfCycle - instanceExecuteBatchTime.toNanos()`.
JavaDoc 
nit: we can close the output stream and the input stream separately, so this could be checkOutNotClosed 
Can you please remove the extra space after `=` from here (while you're changing this file). 
must have -> must be
This might be more readable and succinct with `&&` chaining, what do you think?  ``` java return timestamp == create.timestamp &&     ttl == create.ttl &&     version == create.version &&     id.equals(create.id) &&     type.equals(create.type) &&     ... etc ... ``` 
this should track outstanding demand and fail if there is none 
nullifying the serverChannel is meaningless now I think, so no need for the final clause. Can we open an iterator, and use it to _remove_ the relevant channel, and wrap the close method in a try catch blog with debug log on failures for each channel? 
yea, I am conflicted about the right default here, will put it in the comments for people to chime in 
sure I'll add the check to validate 
do we need to reset this after this integration tests to avoid polluting the system properties of following tests 
Does it mean there is always in memory override registry? 
do we really need both `i` and `nextModeIndex` ?  Seems like just tracking `nextModeIndex` would be sufficient. 
Missing RealmList<Simple> from this I think 
Hmm... can we trim the garbage by just looking for this method (i.e. trim until we find `Task.getCurrentStack()`)?  That seems like it'll be a little more future-proof and will work regardless of whether we're in Android or Java. 
nitpick but name again, `invalidateOptionsMenu` should be sufficient, no reason to have implementation details of method in method name. 
Change to XXHash64 
It will be `called` after Java Compiler (looks like I made same mistake in javadoc of sqlite-ap) :) 
it's ok to pass null to `getTypePresentation` 
maybe "Insert column name '%s' is specified more than once" 
? element.getName()? 
All conditional logic such as this needs to go away. You want to look up the relevant statement from a cache based on the storage name and/or ticket type rather than hardcoding checks. You are not just dealing with TGTs and STs and checking for types manually does not simply scale. 
small nit, missing a space after `+`
When would `relChainPosition` be `null`? 
Actually `e.toString()` is usually short (typically one line), callstack info is not in it 
`checkNonNegative` or `checkZeroOrPositive`? 
This is "deprecated since" notion, so usually it would be 3.0.0. But since we're breaking it straight away, it doesn't much matter. :) 
I know, that this call is technically OK - it will work, but it does not really feel right.   Actually the entire class again shares a huge amount of code with InjectLinkFieldDescriptor. I think it would really make sense to extract the common parts into abstract superclass or do some other refactoring that reduces the amount of repeating code. 
InvalidPathException 
@Scottmitch I don't know if I agree or disagree. I can write a test that involves HttpObjectDecoder to demonstrate the problem and how this class solves it but EmbeddedChannel seems to be adequate for it. `RecvByteBufAllocator` deals with bytes read from the socket. This class deals with messages that were produced by upstream handlers. How these messages came to life doesn't matter. Some messages such as `LastHttpContent#EMPTY_LAST_CONTENT` are not even backed by actual bytes. What matters is that handlers are shoveling messages downstream and this class gives the user a tool to control that flow and builds on top of the existing API.  
"fails" -> "failed" 
when replacing paused boolean with finished one here, afaik finished must be set at all catch cases at innerCollect where paused was set to false... 
@szpak Do we need this class? An other option is to provide an addtional constructor in AssertionMatcher with description parameter. 
loader --> classLoader  Dagger has loaders, they are different things. 
Java 6 compiler is not smart enough to infer `Integer`. 
Remember to change `givenDummyWithId` to match with the new naming. 
hyper nit: `String.format()` reads better than `+` 
same comments as in GroupByQueryQueryToolChest.
Is this correct behavior? Eureka source seems to indicate that leaving on the port as a part of the vipAddress is standard:  From AbstractInstanceConfig.java:  ``` java     @Override     public String getVirtualHostName() {         return (getHostName(false) + ":" + getNonSecurePort());     } ```  Seems to me that honoring exactly what's passed in by the user (minus http/https) is preferable. 
I don't think this is pronounced `an R-eactive Streams`. 
Rename to "pool"
getDisablingTask/getEnablingTask to be removed. 
This looks like an Eclipse code reformat. We should also avoid this sort of change (except in commits dedicated to reformatting or whitespace) to avoid the noisy diff issue Kevin mentioned) 
Not that it matters here, but could also be `ifPresent(Consumer)` instead of `isPresent`/`get`.
whitespace 
Perhaps we should do this as the `DELETE` verb of http.
does this have to be `path.getPath()`? createDirectory() uses `getPath()`. 
You get the idea.
I prefer the was the code was
You can delete both of these try/catch blocks. If an exception is thrown it'll fail the test. 
It's a little hard to tell what the test is testing, since it's all contained in a helper method. I would suggest removing the TODOs at the end of the method and in-lining `test_dispatchKeyEvents`. 
`final` 
Why do we change this to `void`, it seems like in most cases we directly try to `get` afterward. 
ditto
include patterns were wrong if called via aggregated `main` method :/ 
Comment block should include info about the response message(s). 
`resultFlag`? 
What about pulling this out of the if/else entirely? Then the else has append("Preconditions") and below has .append(replacementMethod).append('(') for both cases?
Javadocs 
Why not an AtomicLongFieldUpdater? Now you create more litter than needs to be. 
It would be good to add a message here, "Expressions can only be used for search scripts" or something similar. 
that is a copy/paste error from my side, it shouldn't cause any problems. let me fix that. 
Test this for index 2 and 3 as well (should be 2=empty and 3=null) 
In the testing we use mostly the following naming practice:  test_shortConverted_whenIllegalArgument shortConverted_whenIllegalArgument or  test_shortConverted_whenIllegalFormat_thenNumberFormatException shortConverted_whenIllegalFormat_thenNumberFormatException.  
Would it work to move the exception message to a String var just above here? So much noise. 
I wonder if the Wrapper shouldn't have a close() method if its own instead of making the people who use them know about all the things stored inside and what should and should not be closed. 
check `if (listener != null)` before calling listener method? 
Needs exc 
right, missed it.. 
Don't need this instanceof check here. Other code will validate the config for schema errors.  
Should we use primitive `int` instead of object? 
Naming suggestion: `shouldReturnNotValidIfTheItemIsNotPersisted` 
consider `Iterables.getOnlyElement` instead of `get(0)` to make the assumption about the number of arguments explicit.
This block could be less confusing if it were not nested.  if (empty) { ... } else if (size == 1) { ... } else { ... } 
Was this removed because it wasn't used anywhere? What if there are users depending on it for some reason? 
Do we want to remove the serialVersionUID ?
same as above 
This should use: `KeycloakUriBuilder.fromUri(ResolveRelative.resolveRelativeUri(requestUri, client.getRootUrl(), client.getBaseUrl())).build()` 
Shouldn't this be applied to link, instead of ichat? 
will there be duplication in the case when this returns an InputStream ... which is partially read and then there is a temporary network glitch and consequently an IOException. parent class does the retry (which starts reading data from beginning again) and ends up introducing duplicates ?
It would be much better to replace this `if` clause with a JUnit assumption instead e.g.  ``` Assume.assumeFalse(sLocalTachyonCluster.isDummyUnderFS()); ```  Just returning makes the test as passed which isn't really accurate because they are not being run.  Using a JUnit assumption means that JUnit will mark the test as skipped if the assumption fails which gives a more accurate picture of which tests were actually run 
This operation (or the flush below) might take a while and doesn't need to be in the synchronized block? 
目前DL对主题相关的支持有要求，首先host的application、DLProxyActivity、DLProxyFragmentActivity均不能有主题，host中其他activity可以有主题。插件中所有的activity都可以有主题，但是只能是系统主题（经过测试，发现系统透明主题也不支持），目前DL暂时不支持插件的自定义主题，不过，自定义主题可以通过系统主题+style来代替。注：如果不按这个来操作，将会导致三星手机上DL无法正常工作。  你这种方法经过兼容性验证没？ 
Same comment here about the mocking 
It might be worth dumping this in the Presto wiki to make it more discoverable. 
why not put this in initializeListAdapter? 
why 5 ? 
Done 
No ss. 
doesn't match current style.  Can you revert? 
Where's the implementation for this method? Was it supposed to be in this pull request? 
might want to use createReference and createFunction from TestingHelpers 
What if 't' isn't in the capacity array?
There's a flaw with the way this is implemented: if the number of pending loads is < batch size and batchLoadIntervalMillis hasn't elapsed yet and reload is never called again (or for a long time), any pending key will be left in limbo until someone calls reload again. 
Is the `queryParam != null` part here redundant?
base_request null check is missing. Also, this is different from the code in Jetty6AssetsContextHandler. Why is that? 
some comments on interface explaining the purpose would be nice 
`NoopNamedSource`? Also move to the bottom so the tests are more apparent. 
why is this check inside the loop? 
I was going to say we should probably break down this class rather than loading all these different properties into one place, but at this point, probably worth just tacking it on.
done 
i could be wrong, but it looks like the finished boolean variable is in lockstep with the inMemoryExchange.isFinishing(), which begs the question of whether you need this variable or not. 
In the model I think we use the singular form? 
TODO的这个说明正是开源需要的，将下面为什么 上，左，右 置位0提供说明，与覆盖的case。 
rename to match Java naming. 
I believe you can remove the last 'in.' 
I think `Stack` is one of those "not recommended" classes, quoting:  > A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class.   Stack is, IIRC, synchronized and eg. `ArrayDeque` probably not, but from what I understood (took a quick glance only, though) there is no need for it here. And if there was, using `Stack` wouldn't really close the window of opportunity for a race condition. 
Preconditions are expensive, lets remove them. 
`!isReadable()` 
I guess that one slipped through. 
Return object set only if the type is not a primitive as you did in another pull request. 
why do we need to deploy a verticle here ? to get a new context ?
not really important, but we could probably rename this to WildFlyRaDeployer & AbstractWildFlyRaDeployer 
HttpSolrClient and CloudSolrClient both extend SolrClient. Can you just store a SolrClient instance, instantiate it with either HttpSolrClient or CloudSolrClient? This way you can remove all the `if cloudMode do this else that lines` and do the action regardless on the SolrClient instance.  If there are places you need to distinguish you can cast. 
Will fix that. 
Please javadoc this class to explain what this Evictor is, especially what PartialLRU is given people usually understand what LRU is. 
Perhaps specify that this will effect all loggers?  `Sets the current LogLevel. Setting this will affect all registered loggers.` ? 
This should actually be `"(" + process(node.getValue(), null) + " IS NULL)"`. It needs to be parseable sql 
should there be OR instead in: `maxEntriesBeforeSpill == 0 && memoryLimitBeforeSpill.toBytes() == 0`  if either is set to zero, we should always use in memory builder, right? 
It has to be final for the anonymous inner class, but moving it down there makes a lot of sense. 
if we make the changes I suggested with regards to the aggregator, I think we can avoid needing the getMetricClass() function and keep the original logic 
line 88 - 90, is it only for debug? this may really affect performance as even debug is not on for LOG, the while loop is still executed. 
`Pair.create` 
Copyright shouldn't be removed. 
Name this `expectedSql` 
Should this be called from Bus.unregister()? 
because the projectorChain.startProjections takes the context as argument and outside of the if/else block the projectorChain isn't available 
this would be a bit easier to read if you used `System.out.format` and a format string instead
package private? 
`AtomicInteger` ?Use the constant defined earlier?
Avoid star imports 
I would change this to contain a single "__" 
It may be worthwhile to find if any of the Request.Options can be translated to Ribbon's HttpRequest.overrideConfig. 
Drop `IcsToast.` so it's just `TAG`. 
can we add a test for this behavior? 
All "deleted" lines from here to the end of the file were just moved with a TAB to fit the IF indentation. 
do the similar in-place edit for compilerList 
Sure. Since it isn't relevant for performance I picked one. I'm fine with the other. 
remove `public`? (All the constructors in this file for non-public static classes are marked as public).  
It's not in 'core' module now. And I think, "async" is not the valuable keyword already. So as for me the package name should be just com.github.scribejava.httpclient.ahc to reflect maven arifact id 
This is not part of this pull request so it is confusing to have this comment be a part of this class.  We may want to change the comment until this functionality is actually a part of storm.  
nit, prefer this in a named subclass or a member variable for improved fluency:  ``` mChromePeerManager.setListener(mPeerListener); ``` 
This seems kind of indirect. Isn't this equivalent to setting the min version for each API to 0? Is the null check needed?  
this can be final 
I'm sure there's a reason. But, why logger.error? Why even log it to the logger, if it's in the console? To be able to correlate? 
Typo: "Makes given account keys follow", not "to follow" 
This can also be `Class<T>` which avoids the need to cast every time 
is it really required to loop over the results? if size() > 0  you could set the exception directly. 
:+1: on `503` 
remove comment - public constructor doesn't prevent instantiation. 
This and the following should be `@PublicEvolving`
Why do you decide here if security is enabled based on the COOKIE's existence. I think it could happen that users torn security off, but still have some cookie set. 
Have we identified others than HTC One X? If so we just list that and mention we have only heard it for that device. 
can we call this `maxPossibleBuckets` ?
found this bug, too. 
Nit: Rename to something more precise, like refreshAssignedPartitionsIfNeeded
done 
Note: this is a public API change, but that's the consequence of exposing a dependencies types. This will have to be a Wire 2.0 if we adhere to semantic versioning. 
personal preference: `private static final float CENTER = 0.5f;` 
Get rid of the null queue check; don't allow for null collection. 
Do we need to throw some exception here if interrupted?  
This was a bug, but for whatever reason we weren't suffering it. 
JIRA is created and javadoc is updated. 
Currently there are too many different logical assertions in this single unit test. This breaks the "only one assertion" rule. (see http://xp123.com/articles/3a-arrange-act-assert/).  Moreover, the combination of `asList` and `I.of` is very confusing.  Please think about applying the following renamings: - Change name of private class `I` to `IterableFactory` - Add factory method `IterableFactory.listOf(Object... elements)` - Add factory method `IterableFactory.setOf(Object... elements)` - Add factory method `IterableFactory.arrayOf(Object... elements)`  This also makes it more obvious, that the type of the `Iterable` is not taken into account. 
I think that this technically violates the method spec, but I don't think it matters. 
Why pass these in the context in addition to having setters on the plugin? 
